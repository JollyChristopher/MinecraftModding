package com.halemaster.party;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.server.MinecraftServer;

public class Party 
{
	private List<Entity> members = new ArrayList<Entity>();
	
	public void join(Entity entity)
	{
		Party previousParty = PartyAPIMod.getParty(entity);
		if (null != previousParty)
		{
			previousParty.leave(entity);
		}
		
		members.add(entity);
		PartyAPIMod.partyMap.put(entity, this);
		if (entity instanceof EntityPlayer)
		{
			PartyAPIMod.requests.remove(((EntityPlayer) entity).getDisplayNameString());
		}
	}
	
	public void leave(Entity entity)
	{
		members.remove(entity);
		PartyAPIMod.partyMap.remove(entity);
	}
	
	public boolean contains(Entity entity)
	{
		return members.contains(entity);
	}
	
	public boolean contains(String playerName)
	{
		return members.contains(MinecraftServer.getServer().getConfigurationManager().getPlayerByUsername(playerName));
	}
	
	public EntityPlayer getLeader()
	{
		EntityPlayer leader = null;
		
		for (Entity entity : members)
		{
			if (entity instanceof EntityPlayer)
			{
				leader = (EntityPlayer) entity;
				break;
			}
		}
		
		// No players, means there is no leader!
		if (null == leader)
		{
			for (Entity entity : members)
			{
				leave(entity);
			}
		}
		
		return leader;
	}
	
	public boolean isLeader(Entity member)
	{
		EntityPlayer leader = getLeader();
		if (null == leader)
		{
			return false;
		}
		
		if (!(member instanceof EntityPlayer))
		{
			return false;
		}
		
		return leader.getDisplayNameString().equals(((EntityPlayer) member)
				.getDisplayNameString());
	}
	
	public void promoteLeader(EntityPlayer player)
	{
		if (contains(player))
		{
			members.remove(player);
			members.add(0, player);
		}
	}
	
	public int getSize()
	{
		return members.size();
	}
	
	public Entity getMember(int member)
	{
		return members.get(member);
	}
	
	public EntityPlayer getMember(String playerName)
	{
		EntityPlayer player = null;
		
		for (Entity member : getMembers())
		{
			if (member instanceof EntityPlayer)
			{
				player = (EntityPlayer) member;
				if (player.getDisplayNameString().equals(playerName))
				{
					break;
				}
				player = null;
			}
		}
		
		return player;
	}
	
	public Collection<Entity> getMembers()
	{
		return Collections.unmodifiableList(members);
	}
}
