package com.halemaster.enchanting.testing.tests.basic.spell;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.potion.PotionEffect;
import net.minecraft.scoreboard.Team;
import net.minecraft.util.DamageSource;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.world.World;

import org.junit.BeforeClass;
import org.junit.Test;

import com.halemaster.enchanting.EnchantingMod;
import com.halemaster.enchanting.basic.spell.SpellIceBolt;
import com.halemaster.enchanting.spell.EntitySpellProjectile;

public class SpellIceBoltTest {
	private static SpellIceBolt spell;
	
	@BeforeClass
	public static void init()
	{
		spell = (SpellIceBolt)EnchantingMod.getSpell(SpellIceBolt.enchID);
	}
	
	@Test
	public void testGetColor()
	{
		assertEquals("Color: blue", 0x66CCCC, spell.getColor());
	}
	
	@Test
	public void testMaxLevel()
	{
		assertEquals("Max level", 4, spell.getMaxLevel());
	}
	
	@Test
	public void testGetMinEnchantability()
	{
		assertEquals("Level 1", 1, spell.getMinEnchantability(1));
		assertEquals("Max Level", 22, spell.getMinEnchantability(spell.getMaxLevel()));
	}
	
	@Test
	public void testGetMaxEnchantability()
	{
		assertEquals("Level 1", 9, spell.getMaxEnchantability(1));
		assertEquals("Max Level", 36, spell.getMaxEnchantability(spell.getMaxLevel()));
	}
	
	@Test
	public void testGetCastTime()
	{
		assertEquals("Cast time", 32, spell.getCastTime());
	}
	
	@Test
	public void testGetRawDescription()
	{
		assertEquals("Length", 1, spell.getRawDescription().length);
		assertEquals("Description[0]","enchantment.icebolt.desc.1",spell.getRawDescription()[0]);
	}
	
	@Test
	public void testOnImpact()
	{
		Team team = mock(Team.class);
		MovingObjectPosition position = mock(MovingObjectPosition.class);
		EntityLivingBase thrower = mock(EntityLivingBase.class);
		Entity entity = mock(Entity.class);
		World world = mock(World.class);
		EntitySpellProjectile projectile = new EntitySpellProjectile(world);
		
		// test world being remote
		when(world.isRemote).thenReturn(true);
		spell.onImpact(world, projectile, thrower, position, 1);
		verify(thrower, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		verify(thrower, times(0)).addPotionEffect((PotionEffect)any());
		verify(entity, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		when(world.isRemote).thenReturn(false);
		
		// run null as entityHit
		spell.onImpact(world, projectile, thrower, position, 1);
		verify(thrower, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		verify(thrower, times(0)).addPotionEffect((PotionEffect)any());
		verify(entity, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		
		// run entity as entityHit
		when(position.entityHit).thenReturn(entity);
		spell.onImpact(world, projectile, thrower, position, 1);
		verify(thrower, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		verify(thrower, times(0)).addPotionEffect((PotionEffect)any());
		verify(entity, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		
		// run above and entityLiving and disallow friendly fire
		when(position.entityHit).thenReturn(thrower);
		when(thrower.getTeam()).thenReturn(team);
		when(team.isSameTeam(team)).thenReturn(true);
		when(team.getAllowFriendlyFire()).thenReturn(false);
		spell.onImpact(world, projectile, thrower, position, 1);
		verify(thrower, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		verify(thrower, times(0)).addPotionEffect((PotionEffect)any());
		verify(entity, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		
		// run above and entityLiving and allow friendly fire
		when(team.getAllowFriendlyFire()).thenReturn(true);
		spell.onImpact(world, projectile, thrower, position, 1);
		verify(thrower).attackEntityFrom((DamageSource)any(), 2.0f);
		verify(thrower).addPotionEffect((PotionEffect)any());
		verify(entity, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		
		// run thrower with team
		when(team.isSameTeam(team)).thenReturn(false);
		spell.onImpact(world, projectile, thrower, position, 1);
		verify(thrower).attackEntityFrom((DamageSource)any(), 2.0f);
		verify(thrower).addPotionEffect((PotionEffect)any());
		verify(entity, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
		
		// run entityLiving as hit
		when(thrower.getTeam()).thenReturn(null);
		spell.onImpact(world, projectile, thrower, position, 1);
		verify(thrower).attackEntityFrom((DamageSource)any(), 2.0f);
		verify(thrower).addPotionEffect((PotionEffect)any());
		verify(entity, times(0)).attackEntityFrom((DamageSource)any(), 2.0f);
	}
	
	@Test
	public void testFire()
	{
		// mock EntityPlayer
		EntityPlayer player = mock(EntityPlayer.class);
		// mock world
		World world = mock(World.class);
		// call fire
		spell.fire(world, player, 0);
		// verify playSoundAtEntity was called
		verify(world).playSoundAtEntity((Entity) any(), (String)any(), (Float) any(), (Float) any());
	}
	
	@Test
	public void testOnUpdate()
	{
		// mock world
		// call with new projectile
		// verify spawnParticle was called
	}
}
