package com.halemaster.enchanting.testing;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.junit.runner.Description;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;
import org.junit.runner.notification.RunListener;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class XmlRunListener  extends RunListener
{
	private DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
	private DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
	private Document document = docBuilder.newDocument();
	private Element rootElement;
	
	public void testStarted(Description description) 
	{
		
	}
	
	public void testFinished(Description description)
	{
		
	}

	public void testFailure(Failure failure)
	{
		
	}
	
	// <properties/>
	// <testcase name="testFunctional" classname="com.halemaster.after.logging.LoggerTest" time="0.028">
//	<failure message="java.lang.AssertionError: Should be 0L expected:&lt;1&gt; but was:&lt;0&gt;" type="java.lang.AssertionError">java.lang.AssertionError: Should be 0L expected:&lt;1&gt; but was:&lt;0&gt;
//	at org.junit.Assert.fail(Assert.java:88)
//	at org.junit.Assert.failNotEquals(Assert.java:834)
//	at org.junit.Assert.assertEquals(Assert.java:645)
//	at com.halemaster.after.logging.LoggerTest.testFunctional(LoggerTest.java:50)
//	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
//	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
//	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
//	at java.lang.reflect.Method.invoke(Method.java:483)
//	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
//	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
//	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
//	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
//	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
//	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
//	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
//	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
//	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
//	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
//	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
//	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
//	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
//	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
//	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
//	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
//	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
//	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
//	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
//	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
//	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
//	at java.lang.reflect.Method.invoke(Method.java:483)
//	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
//	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
//	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
//	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
//	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
//	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
//	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
//	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
//	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
//	at java.lang.reflect.Method.invoke(Method.java:483)
//	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
//	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
//	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)
//	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
//	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
//	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
//	at java.lang.Thread.run(Thread.java:745)
//</failure>
	public void testRunStarted(Description description)
	{
		//<testsuite name="com.halemaster.after.logging.LoggerTest" tests="3" skipped="0" failures="0" errors="0" timestamp="2015-07-14T03:49:39" hostname="Halemaster-PC" time="0.03">
		rootElement = document.createElement("testsuite");
		document.appendChild(rootElement);
		//put attributes on root
		rootElement.setAttribute("id", "1");
		
		Element properties = document.createElement("properties");
		// append properties		
		rootElement.appendChild(properties);
	}
	
	public void testRunFinished(Result result)
	{
		
		try
		{
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(document);
			StreamResult streamResult = new StreamResult(new File("build/tests/testResults.xml"));
	 
			transformer.transform(source, streamResult);
	 
			System.out.println("File saved!");
		}
		catch (TransformerConfigurationException e) 
		{
			e.printStackTrace();
			System.out.println("Failed save!");
		} 
		catch (TransformerException e) 
		{
			e.printStackTrace();
			System.out.println("Failed save!");
		}
	}
}
