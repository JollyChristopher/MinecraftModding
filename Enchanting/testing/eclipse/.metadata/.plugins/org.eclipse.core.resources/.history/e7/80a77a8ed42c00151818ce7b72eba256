package com.halemaster.enchanting.testing.tests.basic.spell;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyFloat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.lang.reflect.Field;
import java.util.Arrays;

import net.minecraft.entity.DataWatcher;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.attributes.IAttributeInstance;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;

import org.junit.BeforeClass;
import org.junit.Test;

import com.halemaster.enchanting.EnchantingMod;
import com.halemaster.enchanting.basic.spell.SpellHealing;

public class SpellHealingTest {
	private static SpellHealing spell;

	@BeforeClass
	public static void init() {
		spell = (SpellHealing) EnchantingMod.getSpell(SpellHealing.enchID);
	}

	@Test
	public void testGetColor() {
		assertEquals("Color: white", 0xFFFFFF, spell.getColor());
	}

	@Test
	public void testMaxLevel() {
		assertEquals("Max level", 4, spell.getMaxLevel());
	}

	@Test
	public void testGetMinEnchantability() {
		assertEquals("Level 1", 1, spell.getMinEnchantability(1));
		assertEquals("Max Level", 25,
				spell.getMinEnchantability(spell.getMaxLevel()));
	}

	@Test
	public void testGetMaxEnchantability() {
		assertEquals("Level 1", 9, spell.getMaxEnchantability(1));
		assertEquals("Max Level", 36,
				spell.getMaxEnchantability(spell.getMaxLevel()));
	}

	@Test
	public void testGetCastTime() {
		assertEquals("Cast time", 32, spell.getCastTime());
	}

	@Test
	public void testGetRawDescription() {
		assertEquals("Length", 1, spell.getRawDescription().length);
		assertEquals("Description[0]", "enchantment.healing.desc.1",
				spell.getRawDescription()[0]);
	}

	@Test
	public void testOnUse() throws Exception {
		// new ItemStack of a scroll
		// mock worldIn
		// mock player
		// use level 1
		// verify that sound was played
		ItemStack scroll = new ItemStack(EnchantingMod.scroll);
		World world = mock(World.class);
		EntityPlayer player = mock(EntityPlayer.class);
		DataWatcher dataWatcher = mock(DataWatcher.class);
		IAttributeInstance attrInstance = mock(IAttributeInstance.class);
		when(world.getEntitiesWithinAABB((Class)any(), (AxisAlignedBB)any())).thenReturn(
				Arrays.asList(new EntityLivingBase[]{player}));
		when(player.getEntityAttribute(SharedMonsterAttributes.maxHealth)).thenReturn(attrInstance);
		when(attrInstance.getAttributeValue()).thenReturn(20.0);
		setDataWatcher(player, dataWatcher);
		
		spell.onUse(scroll, world, player, 1);
		verify(world, times(1)).playSoundAtEntity((Entity)any(), anyString(), anyFloat(), anyFloat());
	}
	
	public static void setDataWatcher(EntityLivingBase living, DataWatcher watcher) throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException
	{
		Field field = Entity.class.getDeclaredField("dataWatcher");
		field.setAccessible(true);
		field.set(living, watcher);
	}
}
